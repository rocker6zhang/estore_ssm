<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
	
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">


	
	<!-- 配制数据源, 使用c3p0 -->
	<bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<!-- 连接池中的连接超过3600秒没有使用就弃用,0表示不检查 -->
		<property name="maxIdleTime" value="3600"/>
		<!--连接池中保留的最小连接数。-->
		<property name="minPoolSize" value="10"/>
		<!--连接池中保留的最大连接数。Default:15-->
		<property name="maxPoolSize" value="100"/>
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default:3-->
		<property name="acquireIncrement" value="3"/>
		<property name="maxStatements" value="0"/>
		<!-- 处理报错  Could not load com.mchange.v2.resourcepool.BasicResourcePool$AsyncTestIdleResourceTask. -->
<!-- 		<property name="maxStatements" value="1000"/> -->
		<property name="initialPoolSize" value="10"/>
		<!--每600秒检查所有连接池中的空闲连接。Default:0-->
		<property name="idleConnectionTestPeriod" value="600"/>
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default:30-->
		<property name="acquireRetryAttempts" value="30"/>
		
		<property name="breakAfterAcquireFailure" value="true"/>
		<property name="testConnectionOnCheckout" value="false"/>
		
		
		</bean>


	<!--================== 配置和MyBatis的整合=============== -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定mybatis全局配置文件的位置 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<!-- 指定数据源 -->
		<property name="dataSource" ref="pooledDataSource"></property>
		<!-- 指定mybatis，mapper文件的位置 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
														  
	</bean>

	<!-- 配置扫描器，将mybatis接口的实现(*mapper.java)加入到ioc容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--扫描所有dao接口的实现，加入到ioc容器中 -->
		<property name="basePackage" value="com.estore.dao"></property>
	</bean>
	
	<!-- 配置一个可以执行批量的sqlSession -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>
	<!--=============================================  -->

	<!-- ===============事务控制的配置 ================-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!--控制住数据源  -->
		<property name="dataSource" ref="pooledDataSource"></property>
	</bean>
	<!--开启基于注解的事务，使用xml配置形式的事务（必要主要的都是使用配置式）  -->
	<aop:config>
		<!-- 切入点表达式 -->
		<aop:pointcut expression="execution(* com.estore.service..*(..))" id="txPoint"/>
		<!-- 配置事务增强 -使用上面的切入点表大式 . 下面的事务增强-->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
	</aop:config>
	
	<!--配置事务增强，事务如何切入  -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 所有方法都是事务方法 -->
			<tx:method name="*"/>
			<!--以get开始的所有方法  配制成只读,应为这些是查询请求,  只读效率会比较高,并发性好 -->
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- Spring配置文件的核心点（数据源、与mybatis的整合，事务控制） -->
	
	
	
	
</beans>
